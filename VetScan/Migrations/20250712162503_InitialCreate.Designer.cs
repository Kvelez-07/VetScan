// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetScan.Data;

#nullable disable

namespace VetScan.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712162503_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VetScan.Models.AdminStaff", b =>
                {
                    b.Property<int>("AdminStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminStaffId"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminStaffId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AdminStaff");
                });

            modelBuilder.Entity("VetScan.Models.AnimalSpecies", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciesId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpeciesId");

                    b.ToTable("AnimalSpecies");

                    b.HasData(
                        new
                        {
                            SpeciesId = 1,
                            Description = "Canino",
                            IsActive = true,
                            SpeciesName = "Perro"
                        },
                        new
                        {
                            SpeciesId = 2,
                            Description = "Felino",
                            IsActive = true,
                            SpeciesName = "Gato"
                        },
                        new
                        {
                            SpeciesId = 3,
                            Description = "Lagomorfo",
                            IsActive = true,
                            SpeciesName = "Conejo"
                        });
                });

            modelBuilder.Entity("VetScan.Models.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("VetScan.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Scheduled");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PetId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("VetScan.Models.Breed", b =>
                {
                    b.Property<int>("BreedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedId"));

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("BreedId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            BreedId = 1,
                            BreedName = "Labrador Retriever",
                            Description = "Perro grande y amigable",
                            IsActive = true,
                            SpeciesId = 1
                        },
                        new
                        {
                            BreedId = 2,
                            BreedName = "Pastor Alemán",
                            Description = "Perro de trabajo inteligente",
                            IsActive = true,
                            SpeciesId = 1
                        },
                        new
                        {
                            BreedId = 3,
                            BreedName = "Siamés",
                            Description = "Gato vocal y sociable",
                            IsActive = true,
                            SpeciesId = 2
                        });
                });

            modelBuilder.Entity("VetScan.Models.MedicalConsultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationId"));

                    b.Property<DateTime>("ConsultationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ConsultationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextAppointmentRecommended")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Treatment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("int");

                    b.HasKey("ConsultationId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("MedicalConsultations");
                });

            modelBuilder.Entity("VetScan.Models.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("GeneralNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("RecordNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("PetId");

                    b.HasIndex("RecordNumber")
                        .IsUnique();

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("VetScan.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Concentration")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("GenericName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MedicationId");

                    b.HasIndex("MedicationName")
                        .IsUnique();

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("VetScan.Models.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetId"));

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PetCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PetOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("PetId");

                    b.HasIndex("BreedId");

                    b.HasIndex("PetOwnerId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("VetScan.Models.PetOwner", b =>
                {
                    b.Property<int>("PetOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetOwnerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredContactMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PetOwnerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PetOwners");
                });

            modelBuilder.Entity("VetScan.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<int>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Duration")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Refills")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("VetScan.Models.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecialtyId");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            SpecialtyId = 1,
                            Description = "Cirugías generales en animales",
                            IsActive = true,
                            SpecialtyName = "Cirugía General"
                        },
                        new
                        {
                            SpecialtyId = 2,
                            Description = "Especialidad en problemas de piel",
                            IsActive = true,
                            SpecialtyName = "Dermatología"
                        },
                        new
                        {
                            SpecialtyId = 3,
                            Description = "Especialidad en corazón y sistema circulatorio",
                            IsActive = true,
                            SpecialtyName = "Cardiología"
                        },
                        new
                        {
                            SpecialtyId = 4,
                            Description = "Especialidad en ojos y visión",
                            IsActive = true,
                            SpecialtyName = "Oftalmología"
                        },
                        new
                        {
                            SpecialtyId = 5,
                            Description = "Especialidad en salud dental",
                            IsActive = true,
                            SpecialtyName = "Odontología"
                        });
                });

            modelBuilder.Entity("VetScan.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Administrador del sistema",
                            IsActive = true,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Veterinario",
                            IsActive = true,
                            RoleName = "Veterinarian"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Dueño de mascota",
                            IsActive = true,
                            RoleName = "PetOwner"
                        });
                });

            modelBuilder.Entity("VetScan.Models.VaccinationHistory", b =>
                {
                    b.Property<int>("VaccinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccinationId"));

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("Reactions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.Property<int>("VeterinarianId")
                        .HasColumnType("int");

                    b.HasKey("VaccinationId");

                    b.HasIndex("PetId");

                    b.HasIndex("VaccineId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("VaccinationHistories");
                });

            modelBuilder.Entity("VetScan.Models.Vaccine", b =>
                {
                    b.Property<int>("VaccineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccineId"));

                    b.Property<int?>("BoosterInterval")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCore")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecommendedAge")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VaccineType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VaccineId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("VetScan.Models.Veterinarian", b =>
                {
                    b.Property<int>("VeterinarianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VeterinarianId"));

                    b.Property<string>("Education")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("VeterinarianId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Veterinarians");
                });

            modelBuilder.Entity("VetScan.Models.VitalSign", b =>
                {
                    b.Property<int>("VitalSignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalSignId"));

                    b.Property<int?>("BloodPressureDiastolic")
                        .HasColumnType("int");

                    b.Property<int?>("BloodPressureSystolic")
                        .HasColumnType("int");

                    b.Property<int>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RespiratoryRate")
                        .HasColumnType("int");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("VitalSignId");

                    b.HasIndex("ConsultationId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("VetScan.Models.AdminStaff", b =>
                {
                    b.HasOne("VetScan.Models.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("VetScan.Models.AdminStaff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VetScan.Models.AppUser", b =>
                {
                    b.HasOne("VetScan.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VetScan.Models.Appointment", b =>
                {
                    b.HasOne("VetScan.Models.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VetScan.Models.Veterinarian", "Veterinarian")
                        .WithMany("Appointments")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("VetScan.Models.Breed", b =>
                {
                    b.HasOne("VetScan.Models.AnimalSpecies", "Species")
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("VetScan.Models.MedicalConsultation", b =>
                {
                    b.HasOne("VetScan.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalConsultations")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetScan.Models.Veterinarian", "AttendingVeterinarian")
                        .WithMany("MedicalConsultations")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttendingVeterinarian");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("VetScan.Models.MedicalRecord", b =>
                {
                    b.HasOne("VetScan.Models.Pet", "Pet")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetScan.Models.Pet", b =>
                {
                    b.HasOne("VetScan.Models.Breed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("VetScan.Models.PetOwner", "PetOwner")
                        .WithMany("Pets")
                        .HasForeignKey("PetOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VetScan.Models.AnimalSpecies", "Species")
                        .WithMany("Pets")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("PetOwner");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("VetScan.Models.PetOwner", b =>
                {
                    b.HasOne("VetScan.Models.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("VetScan.Models.PetOwner", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VetScan.Models.Prescription", b =>
                {
                    b.HasOne("VetScan.Models.MedicalConsultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetScan.Models.Medication", "Medication")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("VetScan.Models.VaccinationHistory", b =>
                {
                    b.HasOne("VetScan.Models.Pet", "Pet")
                        .WithMany("VaccinationHistories")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VetScan.Models.Vaccine", "Vaccine")
                        .WithMany("VaccinationHistories")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VetScan.Models.Veterinarian", "Veterinarian")
                        .WithMany("VaccinationHistories")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Vaccine");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("VetScan.Models.Vaccine", b =>
                {
                    b.HasOne("VetScan.Models.AnimalSpecies", "Species")
                        .WithMany("Vaccines")
                        .HasForeignKey("SpeciesId");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("VetScan.Models.Veterinarian", b =>
                {
                    b.HasOne("VetScan.Models.Specialty", "Specialty")
                        .WithMany("Veterinarians")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("VetScan.Models.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("VetScan.Models.Veterinarian", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VetScan.Models.VitalSign", b =>
                {
                    b.HasOne("VetScan.Models.MedicalConsultation", "Consultation")
                        .WithMany("VitalSigns")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("VetScan.Models.AnimalSpecies", b =>
                {
                    b.Navigation("Breeds");

                    b.Navigation("Pets");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("VetScan.Models.Breed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("VetScan.Models.MedicalConsultation", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("VetScan.Models.MedicalRecord", b =>
                {
                    b.Navigation("MedicalConsultations");
                });

            modelBuilder.Entity("VetScan.Models.Medication", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("VetScan.Models.Pet", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");

                    b.Navigation("VaccinationHistories");
                });

            modelBuilder.Entity("VetScan.Models.PetOwner", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("VetScan.Models.Specialty", b =>
                {
                    b.Navigation("Veterinarians");
                });

            modelBuilder.Entity("VetScan.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VetScan.Models.Vaccine", b =>
                {
                    b.Navigation("VaccinationHistories");
                });

            modelBuilder.Entity("VetScan.Models.Veterinarian", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalConsultations");

                    b.Navigation("VaccinationHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
